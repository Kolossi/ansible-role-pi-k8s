---

- name: 'test hostvars'
  when: inventory_hostname in groups['k8smasters']
  debug:
    msg: "{{ inventory_hostname }}"
  tags:
    - debug
    - never

- name: 'enable wait for network on boot'
  register: bootwait_result
  become: yes
  shell:
    cmd: |
        cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
        [Service]
        ExecStart=
        ExecStart=/usr/lib/dhcpcd5/dhcpcd -q -w
        EOF
    creates: /etc/systemd/system/dhcpcd.service.d/wait.conf

- name: 'update hostname'
  when: inventory_hostname != ansible_hostname
  register: hostname_result
  become: yes
  lineinfile:
    path: /etc/hostname
    regexp: '^{{ ansible_hostname }}'
    line: "{{ inventory_hostname }}"
    owner: root
    group: root
    mode: '0644'

- name: 'update hosts file'
  when: inventory_hostname != ansible_hostname
  register: hosts_result
  become: yes
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: 127.0.1.1 {{ inventory_hostname }}
    owner: root
    group: root
    mode: '0644'

- name: 'add cgroup enable cpuset to /boot/config.txt'
  register: config_cgroup_enable_cpuset_result
  become: yes
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(((?! cgroup_enable=cpuset).)*$)'
    line: '\1 cgroup_enable=cpuset'
    backrefs: yes

- name: 'add cgroup memory to /boot/config.txt'
  register: config_cgroup_memory_result
  become: yes
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(((?! cgroup_memory=1).)*$)'
    line: '\1 cgroup_memory=1'
    backrefs: yes

- name: 'add cgroup enable memory to /boot/config.txt'
  register: config_cgroup_enable_memory_result
  become: yes
  lineinfile:
    path: /boot/cmdline.txt
    regexp: '^(((?! cgroup_enable=memory).)*$)'
    line: '\1 cgroup_enable=memory'
    backrefs: yes

- name: 'check if swap enabled'
  register: swapcheck_result
  shell: "free -m | grep Swap:"
  changed_when: false

# sudo swapon --summary : rc=0 if swap on rc=255 if not
- name: 'turn off swap'
  register: offswap_result
  become: yes
  command: "{{ item }}"
  with_items:
   - dphys-swapfile swapoff
   - dphys-swapfile uninstall
   - apt remove -qy dphys-swapfile
  when: "swapcheck_result.stdout!='Swap:             0           0           0'"

#- name: 'offswap debug'
#  debug:
#    msg: offswap_result

- name: 'reboot after hostname change'
  when: bootwait_result.changed or hostname_result.changed or hosts_result.changed or config_cgroup_enable_cpuset_result.changed or config_cgroup_memory_result.changed or config_cgroup_enable_memory_result.changed
  become: yes
  reboot:

- name: 'install aptitude'
  become: yes
  register: aptitude_result
  apt:
    update_cache: yes
    cache_valid_time: 3600 # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    name: aptitude

- name: Upgrade all packages to the latest version
  become: yes
  register: upgrade_result
  apt:
    update_cache: yes
    cache_valid_time: 3600 # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    name: "*"
    state: latest

- name: Remove dependencies that are no longer required
  become: yes
  register: autoremove_result
  apt:
    autoremove: yes

- name: 'reboot after apt updates'
  when: aptitude_result.changed or upgrade_result.changed or autoremove_result.changed
  become: yes
  reboot:

- name: 'install docker'
  register: install_docker_result
  shell:
    cmd: "curl -sSL get.docker.com | sh"
    creates: /usr/bin/docker
  args:
    warn: false # prevent warning about curl

- name: 'add pi user to docker group'
  register: pi_user_result
  become: yes
  user:
    name: pi
    append: yes
    groups: docker

- name: 'reconnect to pickup group membership'
  meta: reset_connection  # to pickup new group membership, thanks: https://stackoverflow.com/questions/26677064/create-and-use-group-without-restart

# thanks: http://www.mydailytutorials.com/ansible-create-files/
- name: 'populate daemon.json'
  register: daemon_json_result
  become: yes
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

# thanks: http://www.mydailytutorials.com/ansible-create-directory/
- name: 'create docker.service.d directory'
  register: create_docker_service_directory
  become: yes
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: 'systemctl restart docker'
  become: yes
  when: pi_user_result.changed or daemon_json_result.changed or create_docker_service_directory.changed
  systemd:
    state: restarted
    name: docker
    daemon_reload: yes
    
- name: 'test docker'
  become: yes
  when: install_docker_result.changed or pi_user_result.changed or daemon_json_result.changed or create_docker_service_directory.changed
  shell:
    cmd: "docker run hello-world"

- name: 'reboot after docker install'
  when: install_docker_result.changed or pi_user_result.changed or daemon_json_result.changed or create_docker_service_directory.changed
  become: yes
  reboot:

- name: 'update apt sources'
  become: yes
  lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    line: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    create: yes

- name: 'add google apt key'
  become: yes
  register: aptkey_result
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: 'update apt cache after key add'
  become: yes
  register: addkey_result
  apt:
    update_cache: yes
  when: aptkey_result.changed

- name: 'install kubeadm and kubectl'
  become: yes
  register: k8s_install_result
  apt:
    update_cache: yes
    cache_valid_time: 3600 # Only run "update_cache=yes" if the last one is more than 3600 seconds ago
    name: kubeadm

- name: 'reboot after k8s install'
  when: k8s_install_result.changed
  become: yes
  reboot:

- name: 'check for k8s images'
  when: inventory_hostname in groups['k8smasters']
  register: image_check_result
  become: yes
  shell: "docker image ls k8s.gcr.io/kube-apiserver | grep k8s.gcr.io/kube-apiserver"
  changed_when: false
  failed_when: image_check_result.rc != 0 and image_check_result.rc != 1
  ignore_errors: true
  
- name: 'pull k8s images'
  when: inventory_hostname in groups['k8smasters'] and image_check_result.rc != 0
  become: yes
  command: "kubeadm config images pull"

- name: 'kubeadm init'
  when: inventory_hostname in groups['k8smasters']
  become: yes
  # cidr required for flannel, see https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tabs-pod-install-6
  # maybe see also https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/
  shell:
    cmd: kubeadm init --token-ttl=0 --pod-network-cidr=10.244.0.0/16
    creates: /etc/kubernetes/manifests/kube-apiserver.yaml

- name: 'create .kube dir'
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory

- name: 'create kube config'
  when: inventory_hostname in groups['k8smasters']
  shell:
    cmd: "sudo cp -n /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config"
    creates: "{{ ansible_env.HOME }}/.kube/config"
  
- name: 'setup iptables bridging'
  when: inventory_hostname in groups['k8smasters']
  become: yes
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: "1"
    state: present
    sysctl_set: yes
    reload: yes
  
- name: 'check for flannel'
  when: inventory_hostname in groups['k8smasters']
  register: flannel_check_result
  shell: "kubectl get pods -n kube-system | grep flannel"
  changed_when: false
  failed_when: flannel_check_result.rc != 0 and flannel_check_result.rc != 1
  ignore_errors: true

- name: 'install flannel'
  when: inventory_hostname in groups['k8smasters'] and flannel_check_result.rc != 0
  # see latest commit sha in https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tabs-pod-install-6
  command: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml"

- name: 'get token'
  when: inventory_hostname == groups['k8smasters'][0]
  register: token_result
  shell: "kubeadm token list | grep 'kubeadm init' | cut -f1 -d' '"

- name: 'get token sha'
  when: inventory_hostname == groups['k8smasters'][0]
  register: token_sha_result
  shell: "openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'"

- name: 'check for joined node'
  when: inventory_hostname in groups['k8sworkers']
  register: node_check_result
  shell: "kubectl get nodes | grep {{ inventory_hostname }}"
  changed_when: false
  failed_when: node_check_result.rc != 0 and node_check_result.rc != 1
  ignore_errors: true
  delegate_to: "{{ groups['k8smasters'][0] }}"

- name: 'debug token'
  debug:
    msg: "{{ hostvars[groups['k8smasters'][0]] }}"
  tags: debug

- name: 'check for token if join needed'
  when: inventory_hostname in groups['k8sworkers'] and node_check_result.rc != 0 and (hostvars[groups['k8smasters'][0]]['token_result']['rc'] != 0 or hostvars[groups['k8smasters'][0]]['token_result']['stdout'] == "")
  fail:
    msg: "Worker join required, but token information not found - was master included in hosts?"

- name: 'join cluster'
  when: inventory_hostname in groups['k8sworkers'] and node_check_result.rc != 0
  become: yes
  command: "kubeadm join {{ hostvars[groups['k8smasters'][0]]['ansible_default_ipv4']['address']}}:6443 --token {{ hostvars[groups['k8smasters'][0]]['token_result']['stdout'] }} --discovery-token-ca-cert-hash sha256:{{ hostvars[groups['k8smasters'][0]]['token_sha_result']['stdout'] }}"

#- name: 'delete token'
#  when: inventory_hostname == groups['k8smasters'][0] and token_result.rc == 0 and token_result.stdout != 0
#  command: "kubeadm token delete {{ token_result.stdout }}"


## https://github.com/kairen/kubeadm-ansible

