---

- name: 'setup dhcp wait for network on boot'
  register: bootwait_result
  become: yes
  shell:
    cmd: |
        cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
        [Service]
        ExecStart=
        ExecStart=/usr/lib/dhcpcd5/dhcpcd -q -w -4 -z eth0
        EOF
    creates: /etc/systemd/system/dhcpcd.service.d/wait.conf

- name: 'enable wait for network on boot'
  register: bootwait_w_result
  become: yes
  lineinfile:
    path: /etc/systemd/system/dhcpcd.service.d/wait.conf
    regexp: '^(ExecStart=/usr/lib/dhcpcd5/dhcpcd((?! -w).)*$)'
    line: '\1 -w'
    backrefs: yes

- name: 'enable dhcp for eth0 only'
  register: bootwait_z_result
  become: yes
  lineinfile:
    path: /etc/systemd/system/dhcpcd.service.d/wait.conf
    regexp: '^(ExecStart=/usr/lib/dhcpcd5/dhcpcd((?! -z eth0).)*$)'
    line: '\1 -z eth0'
    backrefs: yes

- name: 'update hosts file'
  when: inventory_hostname != ansible_hostname
  register: hosts_result
  become: yes
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: 127.0.1.1 {{ inventory_hostname }}
    owner: root
    group: root
    mode: '0644'

# see https://github.com/raspberrypi/firmware/blob/ed238d3329e39a68bde03bbc2dfc293c0c3dc93a/boot/overlays/README#L533
- block:
    - name: 'disable bluetooth devicetree'
      register: config_disable_bt_dt_result
      become: yes
      lineinfile:
        path: "{{ cmdline_txt_path }}"
        regexp: '^(((?! dtoverlay=disable-bt).)*$)'
        line: '\1 dtoverlay=disable-bt'
        backrefs: yes

    - name: 'disable bluetooth modem'
      register: config_disable_bt_modem_result
      become: yes
      systemd:
        name: hciuart
        enabled: no
        state: stopped
  when: (disable_bluetooth | default(False))

- name: 'disable wifi'
  register: config_disable_wifi_result
  when: (disable_wifi | default(False))
  become: yes
  lineinfile:
    path: "{{ cmdline_txt_path }}"
    regexp: '^(((?! dtoverlay=disable-wifi).)*$)'
    line: '\1 dtoverlay=disable-wifi'
    backrefs: yes

  - name: 'check if swap enabled'
    register: swapcheck_result
    shell: "free -m | grep Swap:"
    changed_when: false

  # sudo swapon --summary : rc=0 if swap on rc=255 if not
  - name: 'turn off swap'
    register: offswap_result
    become: yes
    command: "{{ item }}"
    with_items:
     - dphys-swapfile swapoff
     - dphys-swapfile uninstall
     - apt remove -qy dphys-swapfile
    when: "swapcheck_result.stdout!='Swap:             0           0           0'"

#- name: 'offswap debug'
#  debug:
#    msg: offswap_result

# see https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#ensure-iptables-tooling-does-not-use-the-nftables-backend
  - name: 'set iptables to legacy'
    become: yes
    alternatives:
      name: iptables
      path: /usr/sbin/iptables-legacy 

  - name: 'set ip6tables to legacy'
    become: yes
    alternatives:
      name: ip6tables
      path: /usr/sbin/ip6tables-legacy 

  ## not available on pi
  #- name: 'set arptables to legacy'
  #  become: yes
  #  alternatives:
  #    name: arptables
  #    path: /usr/sbin/arptables-legacy 

  ## not available on pi
  #- name: 'set ebtables to legacy'
  #  become: yes
  #  alternatives:
  #    name: ebtables
  #    path: /usr/sbin/ebtables-legacy 


  ## above switch to iptables legacy seems to break this despite it apprently being required according to
  ## https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tabs-pod-install-6
  #- name: 'setup iptables bridging'
  #  when: inventory_hostname in groups['k8smasters']
  #  become: yes
  #  sysctl:
  #    name: net.bridge.bridge-nf-call-iptables
  #    value: "1"
  #    state: present
  #    sysctl_set: yes
  #    reload: yes
